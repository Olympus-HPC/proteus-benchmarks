const char* const kernel_h = "kernel.h\n"
"#include \"util.h\"\n"
"template<const int ni, const int nj, const int N>\n"
"__global__\n"
"    void\n"
"    fk(int seed, const double a,\n"
"       const double b, const double h, const double rth,\n"
"       int *__restrict__ n_inside, double *__restrict__ err) {\n"
"  int i = blockIdx.x * blockDim.x + threadIdx.x + 1;\n"
"  int j = blockIdx.y * blockDim.y + threadIdx.y + 1;\n"
"  if (i <= ni && j <= nj) {\n"
"    double x =\n"
"        ((double)(nj - j) * (-a) + (double)(j - 1) * a) / (double)(nj - 1);\n"
"\n"
"    double y =\n"
"        ((double)(ni - i) * (-b) + (double)(i - 1) * b) / (double)(ni - 1);\n"
"\n"
"    double dx;\n"
"    double dy;\n"
"    double us;\n"
"    double ut;\n"
"    double vh;\n"
"    double vs;\n"
"    double x1;\n"
"    double x2;\n"
"    double w;\n"
"    double w_exact;\n"
"    double we;\n"
"    double wt;\n"
"    double chk = pow(x / a, 2.0) + pow(y / b, 2.0);\n"
"\n"
"    if (1.0 < chk) {\n"
"      w_exact = 1.0;\n"
"      wt = 1.0;\n"
"    } else {\n"
"      atomicAdd(n_inside, 1);\n"
"      w_exact = exp(pow(x / a, 2.0) + pow(y / b, 2.0) - 1.0);\n"
"      wt = 0.0;\n"
"      for (int k = 0; k < N; k++) {\n"
"        x1 = x;\n"
"        x2 = y;\n"
"        w = 1.0;\n"
"        chk = 0.0;\n"
"        while (chk < 1.0) {\n"
"          ut = r8_uniform_01(&seed);\n"
"          if (ut < 1.0 / 2.0) {\n"
"            us = r8_uniform_01(&seed) - 0.5;\n"
"            if (us < 0.0)\n"
"              dx = -rth;\n"
"            else\n"
"              dx = rth;\n"
"          } else {\n"
"            dx = 0.0;\n"
"          }\n"
"\n"
"          ut = r8_uniform_01(&seed);\n"
"          if (ut < 1.0 / 2.0) {\n"
"            us = r8_uniform_01(&seed) - 0.5;\n"
"            if (us < 0.0)\n"
"              dy = -rth;\n"
"            else\n"
"              dy = rth;\n"
"          } else {\n"
"            dy = 0.0;\n"
"          }\n"
"          vs = potential(a, b, x1, x2);\n"
"          x1 = x1 + dx;\n"
"          x2 = x2 + dy;\n"
"\n"
"          vh = potential(a, b, x1, x2);\n"
"\n"
"          we = (1.0 - h * vs) * w;\n"
"          w = w - 0.5 * h * (vh * we + vs * w);\n"
"\n"
"          chk = pow(x1 / a, 2.0) + pow(x2 / b, 2.0);\n"
"        }\n"
"        wt += w;\n"
"      }\n"
"      wt /= (double)(N);\n"
"      atomicAdd(err, pow(w_exact - wt, 2.0));\n"
"    }\n"
"  }\n"
"}\n"
;
